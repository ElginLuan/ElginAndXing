//請助教下載github版本評分 
//任務二+任務三
// 10720101 阮彥? 10720137 陳微心 
#include<iostream>
#include<string>
#include<vector>
#include<fstream>
#include<algorithm>
#include<sstream>

using namespace std;
 
/*
typedef struct slotT{  // 同一個學校名稱的所有資訊 
	vector<int> rSet;
	string key; // schoolName
}slotType;

typedef struct nT{ // 一個節點內含1至2個學校名稱 
	slotType data[KEY_NUM]; // two keys
	struct nT *link[PTR_NUM]; // three ptrs
	struct nT *parent; // point to parent node
}nodeType;

typedef struct pointT{
	nodeType *pnode; // pointer point to parent node
	int pidx; // index of parent node
}pointType;

typedef struct bT{ //分裂時要往上帶的資訊 
	slotType slot;
	nodeType *link;
}blockType;
*/

struct Data{
	int graduates ; // 畢業生人數 
    int num ; //序號 
    string schoolname ; //學校名子 
    string departname ; //科系名子 
    string day ; // 日間別 
    string level ; //等級別 
    
    
};

struct Avl{ //相同畢業生人數 
	vector<Data> key ;
	int graduates ;
	
} ;

vector<Data> list ;
vector<Avl> list1 ;

/*
class 23Tree{
int treeHeight( nodeType *root ) {
    if(root== NULL)
    	return 0;
    //return max( treeHeight( root -> leftPtr ), treeHeight( root -> rightPtr ) )+1; 
	els if( treeHeight( root.link[0] > root.link[1] ) && treeHeight( root.link[0] > root.link[2] ) )  	
		return treeHeight( root.link[0] ) + 1;
	els if( treeHeight( root.link[2] > root.link[0] ) && treeHeight( root.link[2] > root.link[1] ) )  	
		return treeHeight( root.link[2] ) + 1;
	else if( treeHeight( root.link[1] > root.link[0] ) && treeHeight( root.link[1] > root.link[2] ) )  	
		return treeHeight( root.link[1] ) + 1;
} // treeHeight()	
	
void free23tree( nodeType *root ){
		if( root != NULL ){
		free23tree(root->link[0]);
		for( int i = 0; i < KEY_NUM; i++ ){
			if( !root->data[i].rSet.size() )
				break;
			free23tree( root->link[i+1] );
		} // for
	} // if
} // free23tree()

void insert23tree( int newRid, string newKey, nodeType *root, int &nodesNum ){//序號 學校名稱 樹根 
	slotType newSlot;
	newSlot.rSet.push_back(newRid);
	newSlot.key=newKey;
	if( root == NULL ){
		root = createNode(NULL,NULL,NULL,newSlot);
		nodesNum++;
		
	} // if
	else{
		stack<pointType> aPath; // stack to keep the search path
		pointType curP; // last visited node at the top of stack
		blockType blockUp; // a data block received from a split
		searchPath(root, newKey, aPath);
		if( !aPath.empty() ){
			curP = aPath.top(); // 可能是樹葉節點也可能是找到相同學校名稱 
			if( (curP.pnode->data[curP.pidx].rSet.size())&&
			(!newKey.compare(curP.pnode->data[curP.pidx].key))) // 找到相同學校名稱 
				curP.pnode -> data[curP.pidx].rSet.push_back(newRid); // 加入序號 
			else if(!curP.pnode->data[KEY_NUM-1].rSet.size()) {// 沒找到相同學校名稱且有空位 
				insertLeaf(newSlot, curP); // 將學校名稱放到正確位置 
				nodesNum++;
		    } // else if
			else{ // 沒找到相同學校名稱且無空位 
			    nodesNum ++;
				splitLeaf( newSlot, curP, blockUp );
				if( curP.pnode->parent == NULL )
					root = createRoot( curP.pnode, blockUp.link, blockUp.slot);
					 );
				else
				do{
					aPath.pop();
					curP = aPath.top();
					if( !curP.pnode->data[KEY_NUM-1].rSet.size() ){
						insertNonleaf(blockUp, curP); 
						break;
					} // end inner if
					else{
						splitNonleaf(curP,blockUp);
						if( curP.pnode->parent == NULL ){
							root = createRoot( curP.pnode, blockUp.link, blockUp.slot );
							break;
						} // end very inner if
					} // end inner else
				}while(true);
			} // end inner else	
		} // end outer if
	} // end outer else
	
} // insert23tree()

nodeType *createNode(nodeType *left,nodeType *right,nodeType *pNode, slotType newS){
	nodeType *newNode = NULL;
	try{ 
		newNode = new nodeType;
		newNode -> data[0].rSet = newS.rSet;// 新的學校
		newNode -> data[1].rSet.claer(); //代表沒有放資料 
		newNode -> data[0].key = newS.key;// 新的學校 
		newNode -> data[1].key = ""; // 代表沒有放資料 
		newNode -> parent = pNode;
		newNode -> link[0] = left;
		newNode -> link[1] = right;
		newNode -> link[2] = NULL;
	} // end try
	catch( std::bad_alloc&b ){
		std::cerr<<endl<<"bad_alloc caught:"<<ba.what()<<endl; 
	} // end catch
	return newNode;
} // createNode()

void searchPath(nodeType *root, string newKey, stack<pointType> aPath){
	pointType oneP;
	int pos;
	while( cur != NULL ){
		oneP.pnode = cur;
		for( pos = 0; pos < KEY_NUM; pos ++ )
			if( ( !cur->data[pos].rSet.size())||
			((name.compare(cur->data[pos].key))<0 ))
				break;
			else if( !name.compare(cur->data[pos].key)){
				oneP.pidx = pos;
				aPath.push(oneP);
				return;	
			} // else if
		oneP.pidx = pos;
		aPath.push(oneP);
		cur = cur -> link[pos];
	} // while
} // searchPath()

nodeType *createRoot(nodeType *left, nodeType *right, blockType oneSlot){
	nodeType *newRoot = createNode(left, right, NULL, oneSlot );
	left -> parent = newRoot;
	right -> parent = newRoot;
	return newRoot;
} // createRoot()

void insertLeaf( slotType newS, pointType curP ){
	for( int i = KEY_NUM-1; i >= aLeaf.pidx; i-- )
		if( i>aLeaf.pidx ){
			aLeaf.pnode->data[i].rSet = aLeaf.pnode->data[i-1].rSet;
			aLeaf.pnode->data[i].key = aLeaf.pnode->data[i-1].key;	
		} // if
		else if( i == aLeaf.pidx ){
			aLeaf.pnode->data[i].rSet = newS.rSet;
			aLeaf.pnode->data[i].key = newS.key;
		} // else if
		else
			break;
} // insertLeaf()

void splitLeaf( slotType newS, pointType aLeaf, blockType aBlock ){ 
	slotType buf[PTR_NUM];
	int idx = 0;
	for( int i = 0; i< PTR_NUM; i++ ){
		buf[i].rSet = (i==aLeaf.pidx) ? newS.rSet : aLeaf.pnode->data[idx].rSet;
		buf[i].key = (i==aLeaf.pidx) ? newS.key : aLeaf.pnode->data[idx++].key;
	} // for
	aLeaf.pnode->data[0].rSet = buf[0].rSet;
	aLeaf.pnode->data[0].key = buf[0].key;
	for( int i = 1; i < key_Num; i ++ ){
		aLeaf.pnode->data[i].rSet.clear();
	} // for
	aBlock.link = creatNode( NULL, NULL, aLeaf.pnode->parent,buf[2] );
	aBlock.slot.rSet = buf[1].rSet;
	aBlock.slot.key = buf[1].key;
} // splitLeaf() 

void insertNonleaf( blockType oneB, pointType goal ){ // 輸入blockUp,curP 
	nodeType *ptr = goal.pnode->data[goal.pidx];
		if( ptr.data[0].key > oneB.slot.key ){
			if( ptr.link[1] != NULL ){
				ptr.link[2] = ptr.link[1];
			} // if
			ptr.data[1].rSet = ptr.data[0].rSet;	
			ptr.data[1].key = ptr.data[0].key;
			ptr.data[0].key = oneB.slot.key;
			ptr.data[0].rSet = oneB.slot.rSet;
			ptr.link[1] = oneB.link;
		} // if
		else {
			ptr.data[1].rSet = oneB.slot.rSet;	
			ptr.data[1].key = oneB.slot.key;
			ptr.link[2] = oneB.link;				
		} // else 		
} // insertNonleaf

void splitNonleaf( pointType &goal, blockType &oneB ){
	slotType buf[PTR_NUM];
	nodeType *ptr[PTR_NUM+1];
	//nodeType  curline = goal.pnode->data[goal.pidx];
	int idx = 0;
	for( int i = 0 ; i < PTR_NUM ; i++ ){
		buf[i].rSet=(i==goal.pidx)? oneB.slot.rSet : goal.pnode->data[idx].rSet;
		buf[i].key=(i==goal.pidx)? oneB.slot.key : goal.pnode->data[idx++].key;
	} // for
	
	if( oneB.link->data[0].key.compare(goal.pnode->link[2]->data[0].key) ) { // 判斷split 節點是否在最右側 
		for( int i = 0; i <PTR_NUM ; i++ ){
			ptr[i] = goal.pnode->link[i];
		} // for
		ptr[3] = oneB.link;
	}
	else if( oneB.link->data[0].key.compare(goal.pnode->link[1]->data[0].key) < 0 ) {
		ptr[1] = oneB.link;
		ptr[0] = goal.pnode->link[0];
		ptr[2] = goal.pnode->link[1];
		ptr[3] = goal.pnode->link[2];	
	}
	else {
		ptr[0] = goal.pnode->link[0];
		ptr[0] = goal.pnode->link[1];
		ptr[2] = oneB.link;
		ptr[3] = goal.pnode->link[2];
	}
	
	goal.pnode->data[0].rSet = buf[0].rSet;
	goal.pnode->data[0].key = buf[0].key;
	goal.pnode->link[0]=ptr[0];
	ptr[0]->parent = goal.pnode->link[0];
	goal.pnode->link[1] = ptr[1];
	ptr[1] -> parent = goal.pnode->link[1];
	goal.pnode->link[2] = NULL;
	
	for( int i = 1 ; i < KEY_NUM ; i ++ )
		goal.pnode -> data[i].rSet.clear();
	
	oneB.link = createNode(ptr[2],ptr[3],goal.pnode->parent,buf[2]);
	oneB.slot.key = buf[1].key;
	oneB.slot.rSet = buf[1].rSet;
} // splitNonleaf

} // class23Tree

*/

class tree{
	public :
		tree * left ;
		tree * right ;
	
		tree * parent ;
	    Avl element ;
	   
	public :
		tree * root ;
		tree() : left(NULL),right(NULL), parent(NULL),root(NULL){};
	    tree(Avl m) : left(NULL),right(NULL), parent(NULL),root(NULL), element(m){};
			
		
	    
		void insert( Avl m) ;  
		void checkheight(tree * y) ;
		void checkrotate( tree * y, int bf ) ;
		tree * rotatell( tree * y ) ;
		tree * rotaterr( tree * y ) ;
		int height( tree * y ) ;
		void  treeroot( Avl m ) ;
		int checkbf( tree * y ) ;
		void inorder( tree * x ) ;
		void deleteall();
		//void findmax( tree * x, int k )  ;
		void findk( tree * x ) ;
		void  findkm( int k ) ;
		void inorder2( tree * x ) ;
};

int tree :: height( tree * y ) { //算樹高 
	
	if( y == NULL )
	    return 0 ;
	    
	return max( height( y -> left ), height( y -> right ) ) +1 ;
}

int tree :: checkbf( tree * y ) { //算平衡係數 
	int left = height( y -> left ) ;
	int right = height( y -> right ) ;
	int bf = left - right ;
	return bf ;
} 

void tree :: checkrotate( tree * y, int bf ) { //看要往哪旋轉 
	tree * pre = NULL ;
	
	if( y != root ) {
		pre = y -> parent ;
		
	}
	
		
	
		
	if( bf == 2 ) { //左樹比較重 
		
		int bf = checkbf( y -> left ) ;
		if( bf == 1 || bf == 0 ) { //ll旋轉 
			if( y == root ) {
				root = rotatell( y ) ;
			}
			else {
				tree * temp = rotatell( y ) ;
				temp -> parent = pre ;
				
				if( pre -> element.graduates > temp -> element.graduates )
					pre -> left = temp ;
				else
					pre -> right = temp ;
			}	
			
		}
		else { //lr旋轉 
			tree * temp1 = rotaterr( y -> left ) ;
			y -> left = temp1 ;
			temp1 -> parent = y ;
			if( y == root )
				root = rotaterr(y) ;
			else {
				
				tree * temp = rotatell( y ) ;
				temp -> parent = pre ;
				if( pre -> element.graduates > temp -> element.graduates )
					pre -> left = temp ;
				else
					pre -> right = temp ;
			}
			
		}
		
	}
	else if( bf == -2 ) { //右子樹比較重 
		
		int bf = checkbf( y -> right ) ;
		if( bf == -1 || bf == 0 ) { //rr旋轉 
			if( y == root )
				root = rotaterr(y) ;
			else {
				tree * temp = rotaterr( y ) ;
				
				temp -> parent = pre ;
				if( pre -> element.graduates > temp -> element.graduates )
					pre -> left = temp ;
				else
					pre -> right = temp ;
				
			}
		
		}
		else{ //rl旋轉 
	 		tree * temp1 = rotatell( y -> right ) ;
	 		temp1 -> parent = y ;
			y -> right = temp1 ;
			if( y == root )
				root = rotaterr(y) ;
			else {
				tree * temp = rotaterr( y ) ;
				temp -> parent = pre ;
				if( pre -> element.graduates > temp -> element.graduates )
					pre -> left = temp ;
				else
					pre -> right = temp ;
			}
			
		}
	}
	

}

tree * tree :: rotatell( tree * y ) { //ll旋轉 
	tree * x = y -> left ;
	if( x -> right == NULL ) {
		y -> left = x -> right ;
	}
	else {
		y -> left = x -> right ;
	
		x -> right -> parent = y ;
	}

	x -> right = y ;
	y -> parent = x ;

	
	return x ;

}

tree * tree :: rotaterr( tree * y ) { //rr旋轉 
	tree * x = y -> right ;
	if( x -> left == NULL )
		y -> right = x -> left ;
	else {
		y -> right = x -> left ;
		x -> left -> parent = y ;
	}

	
	x -> left = y ;
	y -> parent = x ;
	
	return x ;
}

void tree::treeroot( Avl m) { //設定根 
	root = new tree(m) ;
 
	  // 根 
}

void tree :: insert( Avl m ) { //插入資料 
	tree * y = NULL ;
	tree * x = NULL ;

	tree * newelement = new tree( m )  ; 
	x = root ;
	 
	while( x != NULL ) {
		y = x ;
	
		 
		if( newelement -> element.graduates < x -> element.graduates  )
			x = x -> left ;
		else
			x = x -> right ;
	}
	

		
	
		newelement -> parent = y ;
		
		if(  newelement -> element.graduates < y -> element.graduates  ) {
			
	    	y -> left = newelement ;
	   
			checkheight( y ) ;
    	}
		else{ 
	   	 	y -> right = newelement ;
	   	 	checkheight( y ) ; 
		} 
	

}

void tree :: checkheight( tree * y ) { //判斷平衡係數 
		
		
		int bf = checkbf( y ) ;
	
		if( bf == 2 || bf == -2 ) 
			checkrotate( y , bf ) ;
		else if( bf == -1 || bf == 1 || bf == 0 ) {
		
					
			if( y != root ) {
				
				checkheight( y -> parent ) ;
			}
		}
	
		
}
 
void tree :: inorder2( tree * x ) {
	if( x != NULL  ) {
		
		inorder2( x ->left ) ;
		cout << x -> element.graduates << endl ;
		inorder2( x -> right ) ; 
	}
}
void tree :: inorder( tree * x ) {
	
	if( x != NULL  ) {
		
		inorder( x ->right ) ;
		findk( x ) ;
		inorder( x -> left ) ; 
	}
	
}

void tree :: deleteall(){ //刪除資料 
	delete root ;
	root = NULL ;
	
}


void tree :: findk( tree * x) {

	list1.push_back( x -> element ) ;
	
	
} 

void tree:: findkm( int k ) {
	int size ;
	int i ;
	int j ;
	int index = 1 ;
	while( k > 0 ) {

		k = k - list1.at(i).key.size() ;
		for( int j = 0 ; j < list1.at(i).key.size() ; j++ ) {
			cout << index << ": [" ;
			 
			cout << list1.at(i).key.at(j).num << "]" << list1.at(i).key.at(j).schoolname << ", " << list1.at(i).key.at(j).departname ;
			cout << ", " << list1.at(i).key.at(j).day << ", "<<  list1.at(i).key.at(j).level << ", " <<  list1.at(i).key.at(j).graduates << endl ; 
			index++ ;
		}	
		 i++ ;
		
	}
} 


bool getAll( string name ) ;


void buildlist1 ( Data m ) { //建立avl的資料 
	bool no = false ;
    for( int i = 0 ; i < list1.size() ; i++ ) {  
    	if( m.graduates == list1.at(i).graduates ) { //相同graduates放一起 
    		list1.at(i).key.push_back(m) ;
    		no = true ;
    		break ;
		}
	}	
	
	if( no == false ){ //加入新資料 
		Avl x ;
		x.key.push_back(m) ;
		x.graduates = m.graduates ;
		list1.push_back(x) ;
	}
		
	
}

int main(){
	int command ;
    tree tree1 ;

	while(true){
		cout << endl << "**        Search tree utilities          **" ;
    	cout << endl << "* 0. QUIT                                *" ;
    	cout << endl << "* 1. Build 2-3tree                       *" ;
    	cout << endl << "* 2. Build avl tree                      *" ;
   		cout << endl << "* 3.                                     *" ; 
    	cout << endl << "******************************************" ;
    	cout << endl << "Input a choice(0, 1, 2, 3 ):" ;
   		cin >> command ;
   		
   		if( command == 0 )
   			break ;
    			
   		else if ( command == 1 ) {
   		/*   	
   		    string name ;
   			cout << "Input a file number : " ;
			cin >> name ;
			name = name + ".txt" ;
	        int totallenth ;
	    
			if( getAll( name, totallenth ) ){ 
			cout << "123" ;
				for( int i = 0 ; i < totallenth ; i++ ) {
				
				    cout << list.at(i).schoolname << " " << list.at(i).departname << " " << list.at(i).day  ;
				    cout << " " << list.at(i).level << " " << list.at(i).num << endl ; 
				} // for
		    } // if	
		    23Tree 23tree;
		    nodeType *root;
		    int treeHeight = 0;
		    int nodeNums = 0;
		    for( int i = 0 ; i < list.size() ; i ++ ){
		    	23tree.insert23tree( list[i].num , list[i].schoolName, nodeType *root, nodesNum );
			} // for
			cout<<"Tree height = "<< treeHeight() << endl;
			cout<<"Number of nodes = "<< nodesNum << endl;
			for( int i = 0 ; i < KEY_NUM; i++ ){
				for( int j = 0 ; j < sizeOf(root.data[i]); j++ ){
					int num = list[root.data[i].rSet.at(j);
					cout << num << " "<< list[i].schoolName << list[i].departName << list[i].day<<list[i].level <<list[i].graduates<<endl;
				} // inner for
			} // for
			
		    				
		
		*/	
		}
		
	
		else if( command == 2 ) {
			string name ;
   			cout << "Input a file number : " ;
			cin >> name ;
			name = name + ".txt" ;
	     
	        
	    
			if( getAll( name ) ){ 
		
			
				for( int i = 0 ; i < list.size() ; i++ ) { //建立avl資料 
				
					buildlist1( list.at(i) ) ;
				
				}
			
				for( int i = 0 ; i < list1.size() ; i++ ) { //插入資料 
					if( i == 0 )
						tree1.treeroot(list1.at(0)) ;
					else
						tree1.insert(list1.at(i)) ;
				} 
				tree1.inorder2(tree1.root) ;
		
			}
			
			
		
			cout << "Tree heights =" << tree1.height(tree1.root) << endl ; //印樹高 
			cout << "Number of nodes = " << list1.size() << endl ; //印節點數 
		
			for( int i = 0 ; i < tree1. root -> element.key.size() ; i++ ) { //印根資料 
				cout << i+1 << ":" << "["  ;  
				cout << tree1. root -> element.key.at(i).num << "]" ;
		
				cout << tree1. root -> element.key.at(i).schoolname <<  "," << tree1. root -> element.key.at(i).departname << ","  ;
				cout << tree1. root -> element.key.at(i).day << "," << tree1. root -> element.key.at(i).level << ","  ;
				cout << tree1. root -> element.key.at(i).graduates << endl ;
			
			}
			
			
			
		
		
			tree1.deleteall() ; //刪除資料 
			list.clear() ;
			list1.clear() ;
			
			
			
			
		}
		else if ( command == 3 ) {
			string name ;
   			cout << "Input a file number : " ;
			cin >> name ;
			name = name + ".txt" ;
	        int k ;
	        cout << "請輸入k值(要停止請輸入-1)" << endl ; 
	        cin >> k ;
	    
			if( getAll( name ) ){ 
				for( int i = 0 ; i < list.size() ; i++ ) { //建立avl資料 
				
					buildlist1( list.at(i) ) ;
				
				}
			
				for( int i = 0 ; i < list1.size() ; i++ ) { //插入資料 
					if( i == 0 )
						tree1.treeroot(list1.at(0)) ;
					else
						tree1.insert(list1.at(i)) ;
				} 
				
				list1.clear() ;
				tree1.inorder( tree1.root) ;
				
				tree1.findkm( k ) ;
				cin >> k ;
				while( k != -1 ) {
					tree1.inorder( tree1.root) ;
				
					tree1.findkm( k ) ;
					cin >> k ;
				}
				
				
				tree1.deleteall() ; //刪除資料 
				list.clear() ;
				list1.clear() ;
				
			}
		}
		
		
	
	
	} 

}

bool  getAll( string name ){
	int i, t, no ;
    stringstream ss ;
	string str ;
    char ch = '\0';
    FILE *infile = NULL ;
	bool test = false ;
	int index = 0 ;
	name = "input" + name ;
	infile = fopen(name.c_str(), "r");
	if ( infile == NULL ) 
		cout << name << " does not exist!\n" ; 
	else {
		while( ch != '\n'){
			fscanf(infile,"%c",&ch) ;
		}
		
		fscanf(infile,"%c",&ch) ;
		while( ch != '\n'){
			fscanf(infile,"%c",&ch) ;
		}
		fscanf(infile,"%c",&ch) ;
		while( ch != '\n'){
			fscanf(infile,"%c",&ch) ;
		}
		
        i = 0 ;
	    t = 0 ;  // 計算tab數 

	    no = fscanf(infile,"%c",&ch) ;
	    
		while( no != -1 ){  // 讀得到東西 
			while( ch != '\t'){
				fscanf(infile,"%c",&ch) ;
			}
			fscanf(infile,"%c",&ch) ;
			string num ;
			string schoolname ;
			string departname ;
			string day ;
			string level ;
			Data data ;
			while( t <= 6 ) {
				if ( t == 0 ) {
					
					while ( ch != '\t') {
						schoolname = schoolname + ch ;
						fscanf(infile,"%c",&ch) ;
						
						
					}
					fscanf(infile,"%c",&ch) ;
					data.schoolname = schoolname ;
				
					t++ ;
						 
						
					
					    
				}
				else if ( t == 2 ) {
					while ( ch != '\t') {
						departname = departname + ch ;
						fscanf(infile,"%c",&ch) ;
						
						
					}
					fscanf(infile,"%c",&ch) ;
					data.departname = departname ;
				
					t++ ;
				}
				else if ( t == 3 ) {
					while ( ch != '\t') {
						day = day + ch ;
						fscanf(infile,"%c",&ch) ;
						
						
					}
					fscanf(infile,"%c",&ch) ;
					data.day = day ;
				
					t++ ;
				}
				else if ( t == 4 ) {
					while ( ch != '\t') {
						level = level + ch ;
						fscanf(infile,"%c",&ch) ;
						
						
					}
					fscanf(infile,"%c",&ch) ;
					data.level = level ;
			
					t++ ;
				}
				else {
					while ( ch != '\t') {
					
						fscanf(infile,"%c",&ch) ;
						
					}
					fscanf(infile,"%c",&ch) ;
					t++ ;
				}
				
				 
			}
			
			
			while( ch != '\t'){
				
				num = num + ch ;
				fscanf(infile,"%c",&ch) ;
			}
			 
			ss << num ;
			
			ss >> data.graduates ;
			ss.str("") ;
		    ss.clear() ;
			
		    
		    while( ch != '\n'&& no != -1 ) {
		    	no = fscanf(infile,"%c",&ch) ;
			}
			
			if( ch == '\n') {
				no = fscanf(infile,"%c",&ch) ;
			}
		    	
			
		    
			
			index++ ;
			
			data.num = index ;
			
			list.push_back(data);
			t = 0 ;
		
		}
 			
 			
 		//cout << "345" ;
 	 
		test=true ;  // 成功讀檔 
	
 	
		 
		 
        
		
	}
	
	
	return test ;
} // getAll()
